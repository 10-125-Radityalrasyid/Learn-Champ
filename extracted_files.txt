
================================================================================
File: api\auth\[...nextauth]\route.ts
================================================================================

import { handlers } from '@/auth'

export const { GET, POST } = handlers




================================================================================
File: api\leaderboard\name\route.ts
================================================================================

import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { NameSchema } from '@/lib/validation'
import { Prisma } from '@prisma/client'
import { auth } from '@/auth'

function readCookie(req: Request, key: string) {
  const cookie = req.headers.get('cookie') || ''
  return cookie.match(new RegExp(`(?:^|; )${key}=([^;]+)`))?.[1] ?? null
}

export async function POST(req: Request) {
  const session = await auth()
  const guestId = readCookie(req, 'guestId')
  const userId = session?.user?.id
  if (!guestId && !userId) {
    return NextResponse.json({ error: 'No identity' }, { status: 401 })
  }

  const body = await req.json().catch(() => ({}))
  const parsed = NameSchema.safeParse(body)
  if (!parsed.success) {
    return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 })
  }

  const where: Prisma.ScoreWhereInput = {
    OR: [
      ...(guestId ? [{ guestId }] : []),
      ...(userId ? [{ userId }] : []),
    ],
  }

  if (!where.OR?.length) {
    return NextResponse.json({ error: 'No identity' }, { status: 401 })
  }

  await prisma.score.updateMany({
    where,
    data: { displayName: parsed.data.displayName.trim() || null },
  })

  return NextResponse.json({ ok: true })
}


================================================================================
File: api\leaderboard\route.ts
================================================================================

// app/api/leaderboard/route.ts
import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import type { Prisma } from '@prisma/client'           // ✅ add this
import { ScorePostSchema } from '@/lib/validation'
import { createHash } from 'crypto'
import { auth } from '@/auth'

function readCookie(req: Request, key: string) {
  const cookie = req.headers.get('cookie') || ''
  return cookie.match(new RegExp(`(?:^|; )${key}=([^;]+)`))?.[1] ?? null
}

export async function GET(req: Request) {
  const url = new URL(req.url)
  const limit = Math.min(parseInt(url.searchParams.get('limit') || '20', 10), 100)
  const category = url.searchParams.get('category') || undefined
  const difficulty = url.searchParams.get('difficulty') || undefined

  const where: Prisma.ScoreWhereInput = {}
  if (category) where.category = category
  if (difficulty) where.difficulty = difficulty

  const rows = await prisma.score.findMany({
    where,
    orderBy: [{ points: 'desc' }, { createdAt: 'asc' }],
    take: limit,
    select: {
      points: true,
      displayName: true,
      createdAt: true,
      category: true,
      difficulty: true,
    },
  })

  return NextResponse.json({ leaderboard: rows })
}

export async function POST(req: Request) {
  const session = await auth()
  const userId = session?.user?.id ?? null
  const guestId = readCookie(req, 'guestId')
  if (!guestId && !userId) {
    return NextResponse.json({ error: 'No identity' }, { status: 401 })
  }

  const json = await req.json().catch(() => ({}))
  const parsed = ScorePostSchema.safeParse(json)
  if (!parsed.success) {
    return NextResponse.json({ error: parsed.error.flatten() }, { status: 400 })
  }

  const ip = (req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || '0.0.0.0')
    .split(',')[0]
    .trim()

  const ipHash = createHash('sha256')
    .update(ip + (process.env.IP_SALT || ''))
    .digest('hex')

  const userAgent = req.headers.get('user-agent') || undefined
  const { points, category, difficulty } = parsed.data

  const identityWhere: Prisma.ScoreWhereInput = {
    category,
    difficulty,
  }
  if (userId) {
    identityWhere.userId = userId
  } else if (guestId) {
    identityWhere.guestId = guestId
  }

  const bestExisting = await prisma.score.findFirst({
    where: identityWhere,
    orderBy: { points: 'desc' },
    select: { points: true },
  })

  if (!bestExisting || points > bestExisting.points) {
    await prisma.score.create({
      data: {
        guestId: guestId ?? null,
        points,
        category,
        difficulty,
        ipHash,
        userAgent,
        displayName: session?.user?.name ?? null,
        ...(userId
          ? {
              user: {
                connect: { id: userId },
              },
            }
          : {}),
      },
    })
  }

  return NextResponse.json({ ok: true })
}



================================================================================
File: globals.css
================================================================================

@font-face {
  font-family: 'DK Jamboo';
  src: url('/fonts/DKJamboo.otf') format('opentype');
  font-weight: normal;
  font-style: normal;
}

.dk-jamboo {
  font-family: 'DK Jamboo', sans-serif;
}

@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================================================
File: layout.tsx
================================================================================

// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Toaster } from "@/components/ui/sonner";
import '@/app/globals.css'
import ClientNavbarWrapper from '@/components/client-navbar-wrapper' // ✅ Ganti ini
import { SessionProvider } from '@/components/providers/session-provider'
import { auth } from '@/auth'

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Learn Champ",
  description: "Challenge your mind with quizzes and leaderboards",
};

export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  const session = await auth()

  return (
    <html lang="en" className="h-full">
      <body
        className={`${geistSans.variable} ${geistMono.variable} h-full bg-gradient-to-b from-[#8EE5F0] to-[#B6EFF6] antialiased`}
      >
        <SessionProvider session={session}>
          <ClientNavbarWrapper /> {/* ✅ Gunakan wrapper */}
          {children}
          <Toaster
            theme="dark"
            richColors
            position="top-center"
            closeButton
            expand
            toastOptions={{
              duration: 3000,
              className:
                "z-[60] rounded-lg bg-gray-800 text-white border border-white/10 shadow-lg",
              classNames: {
                title: "text-white",
                description: "text-gray-300",
                actionButton:
                  "bg-indigo-600 hover:bg-indigo-500 text-white rounded-md px-3 py-1 text-sm font-medium",
                cancelButton:
                  "bg-white/10 hover:bg-white/20 text-white rounded-md px-3 py-1 text-sm font-medium",
                closeButton: "text-white hover:text-gray-200",
              },
            }}
          />
        </SessionProvider>
      </body>
    </html>
  );
}


================================================================================
File: leaderboard\page.tsx
================================================================================

// src/app/leaderboard/page.tsx
'use client'

import { useEffect, useMemo, useRef, useState } from 'react'
import Link from 'next/link'
import { toast } from 'sonner'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { useSession } from 'next-auth/react'

// ---- Updated SectionShell to match HeroSection style ----
function SectionShell({ children }: { children: React.ReactNode }) {
  return (
    <div className="relative isolate min-h-screen">
      {/* Background gradient (same as HeroSection) */}
      <div
        className="absolute inset-0 -z-10 bg-[linear-gradient(to_bottom,_#89E5F0_0%,_#B6EFF6_25%,_#CCF3FA_67%,_#FAE9FF_100%)]"
      />

      {/* Optional: subtle wave or blob (optional, but hero uses wave) */}
      {/* We'll skip blobs for consistency with hero's clean look */}

      {/* Center container */}
      <main className="px-6 lg:px-8 py-10 sm:py-14 md:min-h-screen md:flex md:items-center md:justify-center">
        <div className="w-full max-w-4xl">{children}</div>
      </main>
    </div>
  )
}

type Row = {
  points: number
  displayName: string | null
  createdAt: string
  category?: string | null
  difficulty?: string | null
}

export default function LeaderboardPage() {
  const [rows, setRows] = useState<Row[]>([])
  const [loading, setLoading] = useState(false)
  const [limit, setLimit] = useState('20')
  const [category, setCategory] = useState<string>('')
  const [difficulty, setDifficulty] = useState<'any' | 'easy' | 'medium' | 'hard'>('any')
  const [name, setName] = useState('')
  const [saving, setSaving] = useState(false)
  const { data: session } = useSession()
  const hasPrefilledName = useRef(false)

  async function load() {
    try {
      setLoading(true)
      const q = new URLSearchParams()
      if (category.trim()) q.set('category', category.trim())
      if (difficulty !== 'any') q.set('difficulty', difficulty)
      q.set('limit', limit)
      const res = await fetch(`/api/leaderboard?${q.toString()}`, { cache: 'no-store' })
      const data = await res.json()
      setRows(data.leaderboard || [])
    } catch {
      toast.error('Failed to load leaderboard')
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    load()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  useEffect(() => {
    if (!hasPrefilledName.current && session?.user?.name) {
      setName(session.user.name)
      hasPrefilledName.current = true
    }
  }, [session?.user?.name])

  async function saveName() {
    if (!name.trim()) return
    try {
      setSaving(true)
      const r = await fetch('/api/leaderboard/name', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({ displayName: name.trim() }),
      })
      if (!r.ok) {
        toast.error('Could not save nickname')
      } else {
        toast.success('Nickname saved!')
        setName('')
        load()
      }
    } catch {
      toast.error('Could not save nickname')
    } finally {
      setSaving(false)
    }
  }

  const hasData = rows && rows.length > 0

  const subtitle = useMemo(() => {
    const parts: string[] = []
    if (category.trim()) parts.push(`Category: ${category.trim()}`)
    if (difficulty !== 'any') parts.push(`Difficulty: ${difficulty}`)
    return parts.join(' • ')
  }, [category, difficulty])

  return (
    <SectionShell>
      {/* Card with subtle white background + soft shadow (like hero buttons) */}
      <Card className="bg-white/80 backdrop-blur-sm border border-white/50 shadow-lg">
        <CardHeader>
          <div className="flex flex-col sm:flex-row sm:items-end sm:justify-between gap-3">
            <div>
              <CardTitle className="text-gray-900">Leaderboard</CardTitle>
              {subtitle && <p className="mt-1 text-sm text-gray-600">{subtitle}</p>}
              {session?.user?.name && (
                <p className="mt-1 text-xs text-gray-500">
                  Masuk sebagai <span className="font-semibold text-gray-800">{session.user.name}</span>
                </p>
              )}
            </div>

            {/* nickname */}
            <div className="flex items-center gap-2">
              <Input
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Set your nickname"
                className="w-44 bg-white/70 text-gray-900 placeholder:text-gray-500 border-gray-300"
              />
              <Button
                onClick={saveName}
                disabled={saving || !name.trim()}
                className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-semibold"
              >
                {saving ? 'Saving…' : 'Save'}
              </Button>
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* filters */}
          <div className="flex flex-col gap-3 sm:flex-row sm:items-end sm:justify-between">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 w-full sm:w-auto">
              <div className="flex flex-col gap-2">
                <label className="text-sm text-gray-700">Category</label>
                <Input
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  placeholder="e.g. 9 or General Knowledge"
                  className="bg-white/70 text-gray-900 placeholder:text-gray-500 border-gray-300"
                />
              </div>

              <div className="flex flex-col gap-2">
                <label className="text-sm text-gray-700">Difficulty</label>
                <Select
                  value={difficulty}
                  onValueChange={(v: 'any' | 'easy' | 'medium' | 'hard') => setDifficulty(v)}
                >
                  <SelectTrigger className="w-full bg-white/70 text-gray-900 border-gray-300">
                    <SelectValue placeholder="Any" />
                  </SelectTrigger>
                  <SelectContent className="bg-white text-gray-900 border-gray-300">
                    <SelectItem value="any">Any</SelectItem>
                    <SelectItem value="easy">Easy</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="hard">Hard</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col gap-2">
                <label className="text-sm text-gray-700">Limit</label>
                <Select value={limit} onValueChange={(v) => setLimit(v)}>
                  <SelectTrigger className="w-full bg-white/70 text-gray-900 border-gray-300">
                    <SelectValue placeholder="20" />
                  </SelectTrigger>
                  <SelectContent className="bg-white text-gray-900 border-gray-300">
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="20">20</SelectItem>
                    <SelectItem value="50">50</SelectItem>
                    <SelectItem value="100">100</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="flex gap-2">
              <Button
                variant="secondary"
                onClick={load}
                disabled={loading}
                className="bg-white/70 hover:bg-white text-gray-900 border border-gray-300"
              >
                {loading ? 'Loading…' : 'Apply'}
              </Button>
              <Button
                asChild
                variant="outline"
                className="border-gray-800 text-gray-900 hover:bg-gray-100"
              >
                <Link href="/quiz">Play Quiz</Link>
              </Button>
            </div>
          </div>

          <Separator className="bg-gray-200" />

          {/* table */}
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-b border-gray-200">
                  <TableHead className="text-gray-900 font-medium">#</TableHead>
                  <TableHead className="text-gray-900 font-medium">Name</TableHead>
                  <TableHead className="text-gray-900 font-medium">Points</TableHead>
                  <TableHead className="text-gray-900 font-medium">When</TableHead>
                  <TableHead className="text-gray-900 font-medium">Tags</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {hasData ? (
                  rows.map((r, i) => (
                    <TableRow
                      key={`${r.createdAt}-${i}`}
                      className="hover:bg-gray-50 border-b border-gray-100"
                    >
                      <TableCell className="font-medium text-gray-900">{i + 1}</TableCell>
                      <TableCell className="text-gray-700">{r.displayName ?? 'Guest'}</TableCell>
                      <TableCell className="font-semibold text-gray-900">{r.points}</TableCell>
                      <TableCell className="text-gray-600">
                        {new Date(r.createdAt).toLocaleString()}
                      </TableCell>
                      <TableCell className="space-x-1">
                        {r.category && <Badge className="bg-lime-200 text-lime-700">{r.category}</Badge>}
                        {r.difficulty && (
                          <Badge variant="outline" className="text-gray-700 border-gray-300">
                            {r.difficulty}
                          </Badge>
                        )}
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center text-gray-500 py-10">
                      {loading ? 'Loading…' : 'No results yet.'}
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>

          {/* footer actions */}
          <div className="flex flex-wrap items-center justify-between gap-3 pt-4">
            <p className="text-sm text-gray-600">
              Showing top <span className="text-gray-900 font-medium">{limit}</span>{' '}
              {category || difficulty !== 'any' ? 'with filters' : 'overall'}.
            </p>
            <div className="flex gap-2">
              <Button
                asChild
                className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-semibold"
              >
                <Link href="/quiz">Play Again</Link>
              </Button>
              <Button
                asChild
                variant="outline"
                className="border-gray-800 text-gray-900 hover:bg-gray-100"
              >
                <Link href="/">Home</Link>
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </SectionShell>
  )
}


================================================================================
File: not-found.tsx
================================================================================

// src/app/not-found.tsx
import Link from "next/link"

export default function NotFound() {
  return (
    <main
      className="min-h-screen px-4 sm:px-6 py-24 sm:py-32 flex items-center justify-center"
      style={{
        background: `
          linear-gradient(
            to bottom,
            #89E5F0 0%,
            #B6EFF6 25%,
            #CCF3FA 67%,
            #FAE9FF 100%
          )
        `,
      }}
    >
      <div className="text-center max-w-md mx-auto">
        <p className="text-base font-semibold text-gray-600">Oops! Halaman tidak ditemukan</p>
        <h1 className="mt-4 text-5xl sm:text-6xl font-normal tracking-tight text-gray-900">
          404
        </h1>
        <p className="mt-4 text-gray-700 leading-relaxed">
          Sepertinya kamu tersesat di luar arena kuis! Tenang, kamu bisa kembali kapan saja.
        </p>
        <div className="mt-8 flex flex-col sm:flex-row justify-center gap-3 sm:gap-4">
          <Link
            href="/"
            className="w-full sm:w-auto rounded-full bg-lime-400 hover:bg-lime-500 text-gray-900 font-semibold px-6 py-3 shadow-sm transition-colors"
          >
            Kembali ke Beranda
          </Link>
          <Link
            href="/quiz"
            className="w-full sm:w-auto rounded-full border border-gray-800 bg-white/70 hover:bg-gray-100 text-gray-900 font-semibold px-6 py-3 shadow-sm transition-colors"
          >
            Mulai Kuis
          </Link>
        </div>
      </div>
    </main>
  )
}


================================================================================
File: page.tsx
================================================================================

import HeroSection from '@/components/hero-section'
import FeaturesSection from '@/components/feature-section'
import AppFooter from '@/components/footer'

export default function Page() {
  return (
    <main className="relative">
      <HeroSection />
      <FeaturesSection />
      <AppFooter />
    </main>
  )
}



================================================================================
File: quiz\page.tsx
================================================================================

// src/app/quiz/page.tsx
'use client'

import { useEffect, useState } from 'react'
import Link from 'next/link'
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/solid'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Separator } from '@/components/ui/separator'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { toast } from 'sonner'
import confetti from 'canvas-confetti'
import { motion } from 'framer-motion'

type OTDBQuestion = {
  category: string
  type: 'multiple' | 'boolean'
  difficulty: 'easy' | 'medium' | 'hard'
  question: string
  correct_answer: string
  incorrect_answers: string[]
}

type OTDBRawQuestion = {
  category: string
  type: 'multiple' | 'boolean'
  difficulty: 'easy' | 'medium' | 'hard'
  question: string
  correct_answer: string
  incorrect_answers: string[]
}

type QuizPhase = 'setup' | 'loading' | 'playing' | 'finished' | 'error'
type Category = { id: number; name: string }

const QUESTION_AMOUNTS = [5, 10, 15]
const MAX_POINTS = 500
type Diff = 'easy' | 'medium' | 'hard'

type QItem = {
  q: OTDBQuestion
  options: string[] // shuffled once so review shows same order
}

// 🎨 Tema Warna Berdasarkan Kategori
const getCategoryTheme = (categoryName: string) => {
  const cat = categoryName.toLowerCase()
  if (cat.includes('science') || cat.includes('math') || cat.includes('computer')) {
    return { border: 'border-blue-300', bg: 'bg-blue-50', badge: 'bg-blue-100 text-blue-800' }
  }
  if (cat.includes('history') || cat.includes('politics')) {
    return { border: 'border-amber-300', bg: 'bg-amber-50', badge: 'bg-amber-100 text-amber-800' }
  }
  if (cat.includes('geography') || cat.includes('animals') || cat.includes('vehicles')) {
    return { border: 'border-emerald-300', bg: 'bg-emerald-50', badge: 'bg-emerald-100 text-emerald-800' }
  }
  if (cat.includes('art') || cat.includes('celebrities') || cat.includes('entertainment')) {
    return { border: 'border-purple-300', bg: 'bg-purple-50', badge: 'bg-purple-100 text-purple-800' }
  }
  if (cat.includes('sports') || cat.includes('mythology')) {
    return { border: 'border-orange-300', bg: 'bg-orange-50', badge: 'bg-orange-100 text-orange-800' }
  }
  if (cat.includes('general')) {
    return { border: 'border-lime-300', bg: 'bg-lime-50', badge: 'bg-lime-100 text-lime-800' }
  }
  // Default
  return { border: 'border-indigo-300', bg: 'bg-indigo-50', badge: 'bg-indigo-100 text-indigo-800' }
}

/* ---------------- Updated Shell: Hero-style gradient background ---------------- */
function SectionShell({ children }: { children: React.ReactNode }) {
  return (
    <div className="relative isolate min-h-screen">
      {/* Background gradient (same as HeroSection) */}
      <div className="absolute inset-0 -z-10 bg-[linear-gradient(to_bottom,_#89E5F0_0%,_#B6EFF6_25%,_#CCF3FA_67%,_#FAE9FF_100%)]" />

      {/* Center container */}
      <main className="px-6 lg:px-8 py-10 sm:py-14 md:min-h-screen md:flex md:items-center md:justify-center">
        <div className="w-full max-w-3xl">{children}</div>
      </main>
    </div>
  )
}

export default function QuizPage() {
  const [phase, setPhase] = useState<QuizPhase>('setup')

  // setup selections
  const [categories, setCategories] = useState<Category[]>([])
  const [catId, setCatId] = useState<number | 'any'>('any')
  const [catName, setCatName] = useState<string | 'Any Category'>('Any Category')
  const [difficulty, setDifficulty] = useState<Diff | 'any'>('any')
  const [amount, setAmount] = useState<number>(QUESTION_AMOUNTS[0])

  // quiz state
  const [items, setItems] = useState<QItem[]>([])
  const [index, setIndex] = useState(0)
  const [selected, setSelected] = useState<string | null>(null)
  const [selections, setSelections] = useState<(string | null)[]>(
    Array(QUESTION_AMOUNTS[0]).fill(null)
  )
  const [score, setScore] = useState(0)
  const [submitting, setSubmitting] = useState(false)

  // ⏱️ Timer state
  const [timeLeft, setTimeLeft] = useState(15)

  // load categories on setup
  useEffect(() => {
    if (phase !== 'setup') return
    const loadCats = async () => {
      try {
        const r = await fetch('https://opentdb.com/api_category.php', { cache: 'no-store' }) // Fixed space
        const d = await r.json()
        const arr: Category[] = d?.trivia_categories ?? []
        setCategories(arr)
      } catch {
        setCategories([])
      }
    }
    loadCats()
  }, [phase])

  useEffect(() => {
    if (phase === 'setup') {
      setSelections(Array(amount).fill(null))
      setSelected(null)
      setScore(0)
    }
  }, [amount, phase])

  // ⏱️ Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null

    if (phase === 'playing' && selected === null) {
      setTimeLeft(15)
      interval = setInterval(() => {
        setTimeLeft((prev) => {
          if (prev <= 1) {
            if (interval) clearInterval(interval)
            next()
            return 15
          }
          return prev - 1
        })
      }, 1000)
    }

    return () => {
      if (interval) clearInterval(interval)
    }
  }, [phase, index, selected])

  async function startQuiz() {
    try {
      setPhase('loading')
      const params = new URLSearchParams()
      params.set('amount', String(amount))
      params.set('type', 'multiple')
      if (catId !== 'any') params.set('category', String(catId))
      if (difficulty !== 'any') params.set('difficulty', difficulty)

      const r = await fetch(`https://opentdb.com/api.php?${params.toString()}`, { cache: 'no-store' })
      const data = await r.json()
      const qs: OTDBQuestion[] = (data.results ?? []).map(decodeQuestion)
      if (!qs.length) throw new Error('No questions')

      const prepped: QItem[] = qs.map((q) => ({
        q,
        options: shuffle([q.correct_answer, ...q.incorrect_answers]),
      }))

      setItems(prepped)
      setIndex(0)
      setSelected(null)
      setSelections(Array(qs.length).fill(null))
      setScore(0)
      setPhase('playing')
    } catch {
      setPhase('error')
    }
  }

  const current = items[index]
  const totalQuestions = items.length || amount || QUESTION_AMOUNTS[0]
  const progressPct = items.length ? (index / items.length) * 100 : 0

  // 🎨 Ambil tema berdasarkan kategori saat ini
  const currentTheme = phase === 'playing' ? getCategoryTheme(catName) : getCategoryTheme('general')

  function onSelectAnswer(a: string) {
    if (selected) return
    setSelected(a)
    setSelections((prev) => {
      const next = [...prev]
      next[index] = a
      return next
    })
    if (a === current.q.correct_answer) {
      setScore((s) => s + 1)
      // ✨ Confetti saat benar
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 },
        colors: ['#89E5F0', '#B6EFF6', '#CCF3FA', '#A8E6CF', '#D1FAE5']
      })
    }
  }

  function next() {
    if (index + 1 < items.length) {
      setIndex((i) => i + 1)
      setSelected(null)
    } else {
      setPhase('finished')
    }
  }

  async function submitScore() {
    try {
      setSubmitting(true)
      const totalQuestions = items.length || amount || QUESTION_AMOUNTS[0]
      const points = totalQuestions
        ? Math.round((score / totalQuestions) * MAX_POINTS)
        : 0
      const r = await fetch('/api/leaderboard', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify({
          points,
          category: catName,
          difficulty: difficulty === 'any' ? undefined : difficulty,
        }),
      })
      setSubmitting(false)
      if (!r.ok) {
        toast.error('Failed to submit score')
      } else {
        toast.success('Score submitted! 🎉', {
          action: {
            label: 'View Leaderboard',
            onClick: () => (window.location.href = '/leaderboard'),
          },
        })
      }
    } catch {
      setSubmitting(false)
      toast.error('Failed to submit score')
    }
  }

  /* ---------------- RENDER ---------------- */

  if (phase === 'setup') {
    return (
      <SectionShell>
        <Card className="bg-white/80 backdrop-blur-sm border border-white/50 shadow-lg">
          <CardHeader>
            <CardTitle className="text-gray-900">Start a Quiz</CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* Category */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Category</label>
                <Select
                  value={String(catId)}
                  onValueChange={(val: 'any' | `${number}`) => {
                    if (val === 'any') {
                      setCatId('any')
                      setCatName('Any Category')
                    } else {
                      const id = Number(val)
                      setCatId(id)
                      const found = categories.find((c) => c.id === id)
                      setCatName(found?.name || `Category ${id}`)
                    }
                  }}
                >
                  <SelectTrigger className="w-full bg-white/70 text-gray-900 border-gray-300">
                    <SelectValue placeholder="Any Category" />
                  </SelectTrigger>
                  <SelectContent className="bg-white text-gray-900 border-gray-300">
                    <SelectItem value="any">Any Category</SelectItem>
                    {categories.map((c) => (
                      <SelectItem key={c.id} value={String(c.id)}>
                        {c.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Difficulty */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Difficulty</label>
                <Select
                  value={String(difficulty)}
                  onValueChange={(val: 'any' | Diff) => setDifficulty(val)}
                >
                  <SelectTrigger className="w-full bg-white/70 text-gray-900 border-gray-300">
                    <SelectValue placeholder="Any" />
                  </SelectTrigger>
                  <SelectContent className="bg-white text-gray-900 border-gray-300">
                    <SelectItem value="any">Any</SelectItem>
                    <SelectItem value="easy">Easy</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="hard">Hard</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Amount */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Number of Questions
                </label>
                <Select
                  value={String(amount)}
                  onValueChange={(val: `${number}`) => setAmount(Number(val))}
                >
                  <SelectTrigger className="w-full bg-white/70 text-gray-900 border-gray-300">
                    <SelectValue placeholder={String(QUESTION_AMOUNTS[0])} />
                  </SelectTrigger>
                  <SelectContent className="bg-white text-gray-900 border-gray-300">
                    {QUESTION_AMOUNTS.map((amt) => (
                      <SelectItem key={amt} value={String(amt)}>
                        {amt} Questions
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="flex flex-col-reverse sm:flex-row sm:justify-end gap-3 pt-2">
              <Button asChild variant="ghost" className="text-gray-900 hover:bg-gray-100">
                <Link href="/">Cancel</Link>
              </Button>
              <Button
                onClick={startQuiz}
                className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-semibold"
              >
                Start
              </Button>
            </div>
          </CardContent>
        </Card>
      </SectionShell>
    )
  }

  if (phase === 'loading') {
    return (
      <SectionShell>
        <Card className="bg-white/80 backdrop-blur-sm border border-white/50 shadow-lg">
          <CardHeader>
            <CardTitle className="text-gray-900">Loading quiz…</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-2 w-full rounded bg-gray-200 overflow-hidden">
              <div className="h-2 w-1/3 animate-pulse bg-lime-400" />
            </div>
          </CardContent>
        </Card>
      </SectionShell>
    )
  }

  if (phase === 'error') {
    return (
      <SectionShell>
        <div className="text-center max-w-md mx-auto">
          <h1 className="text-3xl sm:text-4xl font-bold text-gray-900">Couldn’t start the quiz</h1>
          <p className="mt-3 text-gray-600">Please refresh to try again.</p>
          <div className="mt-6">
            <Link
              href="/"
              className="rounded-md bg-lime-400 px-5 py-2.5 text-sm font-semibold text-gray-900 hover:bg-lime-500"
            >
              Back to Home
            </Link>
          </div>
        </div>
      </SectionShell>
    )
  }

  if (phase === 'finished') {
    const totalQuestions = items.length || amount || QUESTION_AMOUNTS[0]
    const percent = totalQuestions ? Math.round((score / totalQuestions) * 100) : 0
    return (
      <SectionShell>
        <div className="space-y-6">
          {/* summary */}
          <Card className="bg-white/80 backdrop-blur-sm border border-white/50 shadow-lg">
            <CardHeader>
              <CardTitle className="text-gray-900">Your Results</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-wrap items-center justify-between gap-3">
                <div className="text-gray-900 text-xl font-semibold">
                  {score} / {items.length} correct
                </div>
                <div className="flex flex-wrap items-center gap-2">
                  <Badge className={currentTheme.badge}>{catName}</Badge>
                  {difficulty !== 'any' && (
                    <Badge variant="outline" className="text-gray-700 border-gray-300">
                      {difficulty}
                    </Badge>
                  )}
                  <Badge variant="outline" className="text-gray-700 border-gray-300">
                    {percent}%
                  </Badge>
                </div>
              </div>

              <div className="h-2 w-full rounded bg-gray-200 overflow-hidden">
                <div className="h-2 bg-lime-400" style={{ width: `${percent}%` }} />
              </div>

              <div className="flex flex-wrap gap-3">
                <Button asChild className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-semibold">
                  <Link href="/quiz">Play Again</Link>
                </Button>
                <Button
                  variant="secondary"
                  onClick={submitScore}
                  disabled={submitting}
                  className="bg-white/70 hover:bg-white text-gray-900 border border-gray-300"
                >
                  {submitting ? 'Submitting…' : 'Submit Score'}
                </Button>
                <Button asChild variant="ghost" className="text-gray-900 hover:bg-gray-100">
                  <Link href="/leaderboard">View Leaderboard</Link>
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* review */}
          <Card className="bg-white/80 backdrop-blur-sm border border-white/50 shadow-lg">
            <CardHeader>
              <CardTitle className="text-gray-900">Review</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {items.map((item, i) => {
                const chosen = selections[i]
                const isCorrect = chosen === item.q.correct_answer
                return (
                  <div key={i} className="rounded-lg p-4 bg-gray-50 border border-gray-200">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Badge className="bg-indigo-100 text-indigo-800">Q{i + 1}</Badge>
                        <Badge variant="outline" className="text-gray-700 border-gray-300">
                          {item.q.difficulty}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-2">
                        {isCorrect ? (
                          <span className="inline-flex items-center gap-1 text-green-600 text-sm font-medium">
                            <CheckCircleIcon className="h-5 w-5" /> Correct
                          </span>
                        ) : (
                          <span className="inline-flex items-center gap-1 text-red-600 text-sm font-medium">
                            <XCircleIcon className="h-5 w-5" /> Incorrect
                          </span>
                        )}
                      </div>
                    </div>

                    <h3
                      className="mt-3 text-gray-900 font-semibold"
                      dangerouslySetInnerHTML={{ __html: item.q.question }}
                    />

                    <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-2">
                      {item.options.map((opt) => {
                        const isChosen = chosen === opt
                        const isTheCorrect = opt === item.q.correct_answer
                        let cls =
                          'rounded-md px-3 py-2 text-sm ring-1 ring-gray-200 bg-white text-gray-900' +
                          'transform hover:scale-[1.02] hover:shadow-md'
                        if (isTheCorrect) cls = 'rounded-md px-3 py-2 text-sm ring-1 ring-green-500 bg-green-100 text-green-800'
                        if (isChosen && !isTheCorrect) cls = 'rounded-md px-3 py-2 text-sm ring-1 ring-red-500 bg-red-100 text-red-800'
                        if (isChosen && isTheCorrect) cls = 'rounded-md px-3 py-2 text-sm ring-1 ring-green-500 bg-green-100 text-green-800'
                        return <div key={opt} className={cls} dangerouslySetInnerHTML={{ __html: opt }} />
                      })}
                    </div>
                  </div>
                )
              })}
            </CardContent>
          </Card>
        </div>
      </SectionShell>
    )
  }

  // playing
  // playing
return (
  <SectionShell>
    <div className="space-y-6">
      {/* ⏱️ Timer visual bar */}
      <div className="w-full h-2 rounded bg-gray-200 overflow-hidden">
        <div
          className="h-2 bg-lime-400 transition-all duration-1000 ease-linear"
          style={{ width: `${(timeLeft / 15) * 100}%` }}
        />
      </div>

      {/* Top bar */}
      <div className="flex flex-wrap items-center justify-between gap-3">
        <div className="text-sm text-gray-600">
          Question <span className="font-semibold text-gray-900">{index + 1}</span> / {totalQuestions}
        </div>
        <div className="flex items-center gap-2">
          <Badge className={currentTheme.badge}>{catName}</Badge>
          {difficulty !== 'any' && (
            <Badge variant="outline" className="text-gray-700 border-gray-300">
              {difficulty}
            </Badge>
          )}
          <div className="w-40 h-2 rounded bg-gray-200 overflow-hidden">
            <div className="h-2 bg-lime-400 transition-all" style={{ width: `${progressPct}%` }} />
          </div>
        </div>
      </div>

      {/* Animated Question Card */}
      <motion.div
        key={index} // Penting: ini memicu animasi ulang tiap soal baru
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -20 }}
        transition={{ duration: 0.3, ease: 'easeOut' }}
      >
        <Card className={`bg-white/80 backdrop-blur-sm border ${currentTheme.border} shadow-lg`}>
          <CardHeader className="space-y-2">
            <CardTitle
              className="text-gray-900 text-xl"
              dangerouslySetInnerHTML={{ __html: current?.q.question || '' }}
            />
          </CardHeader>

          <CardContent className="space-y-3">
            {current?.options.map((a) => {
              const isSelected = selected === a
              const isCorrect = a === current.q.correct_answer
              const showResult = selected !== null

              let classes =
                'w-full text-left rounded-md px-4 py-3 text-sm font-medium transition ' +
                'bg-white hover:bg-gray-50 border border-gray-200 text-gray-900'
              if (showResult && isCorrect) {
                classes =
                  'w-full text-left rounded-md px-4 py-3 text-sm font-medium bg-green-100 border border-green-500 text-green-800'
              } else if (showResult && isSelected && !isCorrect) {
                classes =
                  'w-full text-left rounded-md px-4 py-3 text-sm font-medium bg-red-100 border border-red-500 text-red-800'
              }

              return (
                <button
                  title={a.replace(/<\/?[^>]+(>|$)/g, '')}
                  aria-label={a.replace(/<\/?[^>]+(>|$)/g, '')}
                  key={a}
                  disabled={showResult}
                  onClick={() => onSelectAnswer(a)}
                  className={classes}
                  dangerouslySetInnerHTML={{ __html: a }}
                />
              )
            })}

            {selected && (
              <div className="mt-4 flex items-center gap-2 text-sm">
                {selected === current.q.correct_answer ? (
                  <>
                    <CheckCircleIcon className="h-5 w-5 text-green-600" />
                    <span className="text-green-700 font-medium">Correct!</span>
                  </>
                ) : (
                  <>
                    <XCircleIcon className="h-5 w-5 text-red-600" />
                    <span className="text-red-700 font-medium">
                      Incorrect. Correct answer:&nbsp;
                      <span className="text-gray-900" dangerouslySetInnerHTML={{ __html: current.q.correct_answer }} />
                    </span>
                  </>
                )}
              </div>
            )}

            <div className="pt-3">
              <Separator className="bg-gray-200" />
            </div>

            <div className="flex justify-end">
              <Button
                onClick={next}
                disabled={!selected}
                className="bg-lime-400 hover:bg-lime-500 text-gray-900 font-semibold"
              >
                {index + 1 === items.length ? 'Finish' : 'Next'}
              </Button>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  </SectionShell>
)
}

/* ---------- helpers ---------- */
function decodeQuestion(q: OTDBRawQuestion): OTDBQuestion {
  return {
    category: q.category,
    type: q.type,
    difficulty: q.difficulty,
    question: q.question,
    correct_answer: q.correct_answer,
    incorrect_answers: q.incorrect_answers,
  }
}

function shuffle<T>(arr: T[]): T[] {
  const a = [...arr]
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[a[i], a[j]] = [a[j], a[i]]
  }
  return a
}

