
================================================================================
File: api\leaderboard\route.ts
================================================================================

// app/api/leaderboard/route.ts
import { NextResponse } from 'next/server'
import clientPromise from '@/lib/mongodb' // Kita PAKAI koneksi MongoDB di sini

export async function GET() {
  // Fungsi ini untuk MENGAMBIL data leaderboard
  try {
    const client = await clientPromise
    const db = client.db("quizApp") // Pastikan nama DB-nya 'quizApp'

    const leaderboard = await db
      .collection("leaderboard") // Kita buat collection baru 'leaderboard'
      .find({})
      .sort({ score: -1 }) // Urutkan dari skor tertinggi (-1)
      .limit(10) // Ambil 10 teratas
      .toArray()

    return NextResponse.json(leaderboard)
  } catch (e) {
    console.error(e)
    return NextResponse.json({ error: 'Failed to fetch leaderboard' }, { status: 500 })
  }
}

export async function POST(request: Request) {
  // Fungsi ini untuk MENYIMPAN skor baru
  try {
    // 1. Ambil data { name, score } dari body request
    const { name, score } = await request.json()

    // Validasi sederhana
    if (!name || typeof score !== 'number') {
      return NextResponse.json({ error: 'Invalid name or score' }, { status: 400 })
    }

    // 2. Siapkan dokumen baru untuk disimpan
    const newScore = {
      name: name,
      score: score,
      createdAt: new Date(),
    }

    // 3. Hubungkan ke DB dan simpan
    const client = await clientPromise
    const db = client.db("quizApp")

    const result = await db.collection("leaderboard").insertOne(newScore)

    // 4. Kirim kembali respon sukses
    return NextResponse.json({ message: "Score saved", data: result.insertedId }, { status: 201 })

  } catch (e) {
    console.error(e)
    return NextResponse.json({ error: 'Failed to save score' }, { status: 500 })
  }
}


================================================================================
File: api\quiz\route.ts
================================================================================

// app/api/quiz/route.ts
import { NextResponse } from 'next/server'

export async function GET(req: Request) {
  try {
    const { searchParams } = new URL(req.url)
    const amount = searchParams.get('amount') || '5'
    const type = searchParams.get('type') || 'multiple'
    const difficulty = searchParams.get('difficulty') || 'medium'

    const apiUrl = `https://opentdb.com/api.php?amount=${amount}&type=${type}&difficulty=${difficulty}`

    console.log("Fetching trivia from:", apiUrl)

    const response = await fetch(apiUrl, {
      headers: {
        'User-Agent': 'NextQuizApp/1.0',
        'Accept': 'application/json',
      },
      cache: 'no-store',
    })

    if (!response.ok) {
      console.error("Open Trivia DB failed with status:", response.status)
      return NextResponse.json({ error: `Open Trivia DB error: ${response.status}` }, { status: 500 })
    }

    const data = await response.json()

    // Pastikan respons valid
    if (!data.results || !Array.isArray(data.results)) {
      console.error("Invalid response structure:", data)
      return NextResponse.json({ error: "Invalid response from trivia API" }, { status: 500 })
    }

    return NextResponse.json(data.results)
  } catch (error) {
    console.error("Error fetching trivia:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}



================================================================================
File: globals.css
================================================================================

/* === Tailwind v4 Syntax === */
@import "tailwindcss";

/* Tambahkan utilitas custom */
@layer utilities {
  .animate-fade-in {
    animation: fade-in 0.5s ease-in-out;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}

/* === Variabel warna & tema === */
:root {
  --radius: 0.625rem;
  --card: oklch(1 0 0);
  --primary: oklch(0.208 0.042 265.755);
  --background: oklch(1 0 0);
  --foreground: oklch(0.129 0.042 264.695);
}

/* === Mode Gelap === */
.dark {
  --background: oklch(0.129 0.042 264.695);
  --foreground: oklch(0.984 0.003 247.858);
}

/* === Styling dasar global (versi aman tanpa border-border) === */
@layer base {
  * {
    @apply border-none outline-none;
  }

  body {
    @apply bg-white text-black;
  }
}



================================================================================
File: layout.tsx
================================================================================

// src/app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Toaster } from "@/components/ui/sonner";
import "./globals.css";
import Navbar from '@/components/navbar'

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Learn Champ",
  description: "Challenge your mind with quizzes and leaderboards",
};

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className="h-full">
      <body
        className={`${geistSans.variable} ${geistMono.variable} h-full bg-gray-900 antialiased`}
      >
        <Navbar />
        {children}
        <Toaster
          theme="dark"
          richColors
          position="top-center"
          closeButton
          expand
          toastOptions={{
            duration: 3000,
            className:
              "z-[60] rounded-lg bg-gray-800 text-white border border-white/10 shadow-lg",
            classNames: {
              // optional: style individual parts
              title: "text-white",
              description: "text-gray-300",
              actionButton:
                "bg-indigo-600 hover:bg-indigo-500 text-white rounded-md px-3 py-1 text-sm font-medium",
              cancelButton:
                "bg-white/10 hover:bg-white/20 text-white rounded-md px-3 py-1 text-sm font-medium",
              closeButton: "text-white hover:text-gray-200",
            },
          }}
        />
      </body>
    </html>
  );
}


================================================================================
File: leaderboard\page.tsx
================================================================================

// app/leaderboard/page.tsx
import React from 'react';
import Link from 'next/link';

type Score = {
  _id: string;
  name: string;
  score: number;
  createdAt: string;
};

async function getLeaderboard() {
  const apiUrl = process.env.NEXT_PUBLIC_VERCEL_URL
    ? `https://${process.env.NEXT_PUBLIC_VERCEL_URL}`
    : 'http://localhost:3000';

  const res = await fetch(`${apiUrl}/api/leaderboard`, { cache: 'no-store' });
  if (!res.ok) return [];
  return res.json();
}

export default async function LeaderboardPage() {
  const scores: Score[] = await getLeaderboard();

  const getRankIcon = (rank: number) => {
    if (rank === 1) return 'ü•á';
    if (rank === 2) return 'ü•à';
    if (rank === 3) return 'ü•â';
    return `#${rank}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="w-full max-w-2xl bg-white rounded-2xl shadow-xl overflow-hidden">
        <div className="bg-indigo-600 py-6 text-center">
          <h1 className="text-2xl md:text-3xl font-bold text-white">üèÜ Papan Peringkat</h1>
        </div>

        <div className="p-6">
          {scores.length === 0 ? (
            <div className="text-center py-10 text-gray-500">
              <p>Belum ada skor. Jadilah yang pertama!</p>
            </div>
          ) : (
            <ul className="space-y-3">
              {scores.map((item, index) => (
                <li
                  key={item._id}
                  className={`flex items-center justify-between p-4 rounded-lg ${
                    index < 3 ? 'bg-gradient-to-r from-yellow-50 to-amber-50 border border-amber-200' : 'bg-gray-50'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-lg font-bold text-gray-700 min-w-[36px]">
                      {getRankIcon(index + 1)}
                    </span>
                    <span className="font-medium text-gray-800">{item.name}</span>
                  </div>
                  <span className="text-xl font-bold text-indigo-600">{item.score}</span>
                </li>
              ))}
            </ul>
          )}

          <div className="mt-8 flex justify-center gap-4">
            <Link
              href="/quiz"
              className="px-5 py-2.5 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition font-medium"
            >
              Main Lagi
            </Link>
            <Link
              href="/"
              className="px-5 py-2.5 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 transition font-medium"
            >
              Beranda
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
File: page.tsx
================================================================================

// app/page.tsx
import Link from "next/link";

export default function HomePage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 flex flex-col items-center justify-center p-4 text-center">
      <div className="max-w-2xl w-full space-y-8">
        <h1 className="text-4xl md:text-5xl font-bold text-gray-900">
          Selamat Datang di <span className="text-indigo-600">Learn Champ</span> üéì
        </h1>
        <p className="text-lg text-gray-600">
          Uji pengetahuanmu dengan kuis seru dari berbagai kategori. Jawab sebanyak mungkin dan raih posisi teratas di papan peringkat!
        </p>

        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Link
            href="/quiz?amount=5"
            className="px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg shadow hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            Mulai Kuis (5 Soal)
          </Link>
          <Link
            href="/leaderboard"
            className="px-6 py-3 bg-white text-indigo-600 font-medium rounded-lg border border-indigo-300 shadow hover:bg-indigo-50 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            Lihat Leaderboard
          </Link>
        </div>

        <div className="mt-12 grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white p-5 rounded-xl border border-gray-200 shadow-sm">
            <h3 className="font-bold text-lg text-gray-800 mb-2">üìö Berbagai Kategori</h3>
            <p className="text-gray-600 text-sm">
              Sejarah, sains, film, geografi, dan masih banyak lagi!
            </p>
          </div>
          <div className="bg-white p-5 rounded-xl border border-gray-200 shadow-sm">
            <h3 className="font-bold text-lg text-gray-800 mb-2">‚è±Ô∏è Tanpa Batas Waktu</h3>
            <p className="text-gray-600 text-sm">
              Jawab dengan tenang ‚Äî tidak ada tekanan waktu.
            </p>
          </div>
          <div className="bg-white p-5 rounded-xl border border-gray-200 shadow-sm">
            <h3 className="font-bold text-lg text-gray-800 mb-2">üèÜ Leaderboard Global</h3>
            <p className="text-gray-600 text-sm">
              Simpan skormu dan bandingkan dengan pemain lain.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
File: quiz\page.tsx
================================================================================

"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

type Category = { id: number; name: string };

export default function QuizPage() {
  const [isConfiguring, setIsConfiguring] = useState(true);
  const [isFetching, setIsFetching] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [questions, setQuestions] = useState<any[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [score, setScore] = useState(0);

  // Form state
  const [amount, setAmount] = useState("5");
  const [difficulty, setDifficulty] = useState("medium");
  const [type, setType] = useState("multiple");
  const [category, setCategory] = useState("");
  const [categories, setCategories] = useState<Category[]>([]);

  const router = useRouter();

  // üîπ Fetch kategori dari Open Trivia DB
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const res = await fetch("https://opentdb.com/api_category.php");
        const data = await res.json();
        if (data.trivia_categories) {
          setCategories(data.trivia_categories);
        }
      } catch (err) {
        console.error("Gagal memuat kategori:", err);
      }
    };
    fetchCategories();
  }, []);

  // üîπ Fungsi memulai kuis
  const startQuiz = async () => {
    const numAmount = parseInt(amount);
    if (isNaN(numAmount) || numAmount < 1 || numAmount > 10) {
      setError("Jumlah soal harus antara 1‚Äì10");
      return;
    }

    setError(null);
    setIsFetching(true);

    const params = new URLSearchParams();
    params.append("amount", amount);
    if (difficulty) params.append("difficulty", difficulty);
    if (type) params.append("type", type);
    if (category) params.append("category", category);

    try {
      const res = await fetch(`/api/quiz?${params.toString()}`);
      const data = await res.json();

      if (!Array.isArray(data)) throw new Error("Format data tidak valid");
      if (data.length === 0)
        throw new Error("Tidak ada soal yang tersedia untuk kriteria ini");

      setQuestions(data);
      setIsConfiguring(false);
    } catch (err) {
      console.error(err);
      setError("Gagal memuat soal. Coba ubah pengaturan atau coba lagi.");
    } finally {
      setIsFetching(false);
    }
  };

  const handleNext = () => {
    if (selectedAnswer === null) {
      setError("Pilih jawaban terlebih dahulu!");
      return;
    }

    setError(null);
    const currentQ = questions[currentIndex];
    const isCorrect = selectedAnswer === currentQ.correct_answer;

    if (isCorrect) setScore((prev) => prev + 1);

    if (currentIndex + 1 >= questions.length) {
      const finalScore = score + (isCorrect ? 1 : 0);
      router.push(`/result?score=${finalScore}&total=${questions.length}`);
    } else {
      setCurrentIndex((prev) => prev + 1);
      setSelectedAnswer(null);
    }
  };

  // === TAMPILAN: Pengaturan Awal ===
  if (isConfiguring) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 flex items-center justify-center p-4">
        <div className="w-full max-w-2xl bg-white rounded-2xl shadow-lg p-6 md:p-8">
          <h1 className="text-2xl font-bold text-gray-800 mb-6 text-center">‚öôÔ∏è Atur Kuis Anda</h1>

          {error && (
            <div className="mb-4 p-3 bg-red-50 text-red-700 rounded-lg text-sm">
              {error}
            </div>
          )}

          <div className="space-y-5">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Jumlah Soal (1‚Äì10)
              </label>
              <input
                type="number"
                min="1"
                max="10"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tingkat Kesulitan
              </label>
              <select
                value={difficulty}
                onChange={(e) => setDifficulty(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              >
                <option value="">Semua</option>
                <option value="easy">Mudah</option>
                <option value="medium">Sedang</option>
                <option value="hard">Sulit</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Jenis Soal
              </label>
              <select
                value={type}
                onChange={(e) => setType(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              >
                <option value="multiple">Pilihan Ganda</option>
                <option value="boolean">Benar/Salah</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Kategori Soal
              </label>
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              >
                <option value="">Semua Kategori</option>
                {categories.map((cat) => (
                  <option key={cat.id} value={cat.id}>
                    {cat.name}
                  </option>
                ))}
              </select>
            </div>

            <button
              onClick={startQuiz}
              disabled={isFetching}
              className={`w-full py-3 px-4 rounded-lg font-medium text-white ${
                isFetching
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-indigo-600 hover:bg-indigo-700"
              }`}
            >
              {isFetching ? "Memuat soal..." : "Mulai Kuis"}
            </button>
          </div>
        </div>
      </div>
    );
  }

  // === TAMPILAN: Saat Mengerjakan Kuis ===
  const current = questions[currentIndex];
  const allAnswers =
    type === "boolean"
      ? ["True", "False"]
      : [...current.incorrect_answers, current.correct_answer].sort(
          () => Math.random() - 0.5
        );

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-100 flex items-center justify-center p-4">
      <div className="w-full max-w-2xl bg-white rounded-2xl shadow-lg p-6">
        <div className="flex justify-between items-center mb-4">
          <span className="text-sm font-medium text-gray-600">
            Soal {currentIndex + 1} dari {questions.length}
          </span>
          <span className="text-sm font-semibold text-indigo-600">
            Skor: {score}
          </span>
        </div>

        <h2
          className="text-lg md:text-xl font-medium text-gray-800 mb-6 leading-relaxed"
          dangerouslySetInnerHTML={{ __html: current.question }}
        />

        {error && (
          <div className="mb-4 p-2 bg-red-50 text-red-700 rounded text-sm">{error}</div>
        )}

        <div className="space-y-3 mb-8">
          {allAnswers.map((ans, i) => (
            <div
              key={i}
              onClick={() => {
                setSelectedAnswer(ans);
                setError(null);
              }}
              className={`p-4 rounded-lg border cursor-pointer transition-all ${
                selectedAnswer === ans
                  ? "bg-indigo-100 border-indigo-500"
                  : "bg-gray-50 border-gray-200 hover:bg-gray-100"
              }`}
            >
              <span dangerouslySetInnerHTML={{ __html: ans }} />
            </div>
          ))}
        </div>

        <button
          onClick={handleNext}
          disabled={selectedAnswer === null}
          className={`w-full py-3 px-4 rounded-lg font-medium text-white ${
            selectedAnswer === null
              ? "bg-gray-300 cursor-not-allowed"
              : "bg-indigo-600 hover:bg-indigo-700"
          }`}
        >
          {currentIndex + 1 === questions.length ? "Selesai" : "Soal Berikutnya"}
        </button>
      </div>
    </div>
  );
}



================================================================================
File: result\page.tsx
================================================================================

// app/result/page.tsx
"use client";

import React, { useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import Link from 'next/link';

export default function ResultPage() {
  const router = useRouter();
  const searchParams = useSearchParams();

  const score = parseInt(searchParams.get('score') || '0');
  const total = parseInt(searchParams.get('total') || '0');
  const [name, setName] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!name.trim()) {
      setError("Nama tidak boleh kosong!");
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      const res = await fetch('/api/leaderboard', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, score }),
      });

      if (res.ok) {
        router.push('/leaderboard');
      } else {
        throw new Error();
      }
    } catch {
      setError("Gagal menyimpan skor. Coba lagi.");
      setIsSubmitting(false);
    }
  };

  const percentage = total > 0 ? Math.round((score / total) * 100) : 0;
  let message = "Bagus sekali!";
  if (percentage < 40) message = "Jangan menyerah!";
  else if (percentage < 70) message = "Lumayan!";
  else if (percentage < 90) message = "Hebat!";

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-2xl shadow-xl p-8 text-center">
        <h1 className="text-2xl font-bold text-gray-800 mb-2">Kuis Selesai!</h1>
        <p className="text-gray-600 mb-6">{message}</p>

        <div className="mb-6">
          <div className="text-5xl font-bold text-emerald-600">{score}</div>
          <div className="text-gray-500 mt-1">dari {total} soal</div>
          <div className="mt-2 text-sm text-gray-500">({percentage}% benar)</div>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-left text-sm font-medium text-gray-700 mb-1">
              Nama Anda:
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
              placeholder="Masukkan nama..."
              disabled={isSubmitting}
            />
          </div>

          {error && <p className="text-red-500 text-sm">{error}</p>}

          <button
            type="submit"
            disabled={isSubmitting || !name.trim()}
            className={`w-full py-2.5 rounded-lg font-medium text-white ${
              isSubmitting || !name.trim()
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-emerald-600 hover:bg-emerald-700"
            }`}
          >
            {isSubmitting ? "Menyimpan..." : "Simpan ke Leaderboard"}
          </button>
        </form>

        <div className="mt-8 flex justify-center gap-4">
          <Link href="/quiz" className="text-emerald-600 font-medium hover:underline">
            Ulangi Kuis
          </Link>
          <Link href="/" className="text-gray-600 font-medium hover:underline">
            Beranda
          </Link>
        </div>
      </div>
    </div>
  );
}

